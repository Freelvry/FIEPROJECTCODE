# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10nuoMHLNf_SgLmpcfB-3Xksorpywgv9h
"""

#python code
# Import streamlit for the web app
import streamlit as st

# Set the page layout to wide
st.set_page_config(layout="wide")

# Custom CSS to create thicker horizontal line and adjust title sizes
st.markdown(
    """
    <style>
    .reportview-container .main .block-container {
        max-width: 90%;
    }
    .vl {
        border-left: 2px solid black;
        height: 500px;
        position: absolute;
        left: 50%;
        margin-left: -3px;
        top: 0;
    }
    .horizontal-line {
        border-top: 3px solid black;
        margin-top: 5px;
    }
    .title {
        font-size: 24px;
        font-weight: normal;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Title of the dashboard, centered
st.markdown('<h1 style="text-align: center;">US Senator Portfolio Analysis Dashboard</h1>', unsafe_allow_html=True)

# Using columns to create a two-column layout for the top charts, and adding vertical lines
col1, col2 = st.columns(2)

# First column for the portfolio value evolution
with col1:
    st.markdown('<p class="title">Overall Senators\' Portfolio Evolution</p>', unsafe_allow_html=True)
    # Placeholder for the portfolio value chart
    #ADDED TABLE
    import pandas as pd
# Define the URL of the CSV file on GitHub
url = "https://raw.githubusercontent.com/Laci1004/FIEP/main/DF_Recent_Trades.csv"
# Read the CSV file into a dataframe
df = pd.read_csv(url)

# Keep only the last 500 rows
df = df.head(500)
# Drop the report date, amount, estimated shares, and estimated shares adjusted columns
df = df.drop(['ReportDate', 'Amount', 'EstimatedShares', 'EstimatedSharesAdjusted', "House"], axis=1)

# Convert the PriceChange column to percentage
df['PriceChange'] = df['PriceChange'] * 100
# Round the PriceChange column to 1 decimal place
df['PriceChange'] = df['PriceChange'].round(1)
#Drop The INDEX
df = df.reset_index(drop=True)

###st.table(df)###
portfolio_value_chart_placeholder = st.dataframe(df)

#END OF TABLE
# Vertical line
st.markdown('<div class="vl"></div>', unsafe_allow_html=True)

# Second column for the CO2 emissions evolution
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt

with col2:
    st.markdown('<p class="title">Overall CO2 Emissions in the US</p>', unsafe_allow_html=True)
    # Placeholder for the CO2 emissions chart
# Creating the DataFrame from the provided data
# Plotting the pie chart
def plot_pie_chart():
    plt.figure(figsize=(8, 8))
    plt.pie(senate_holdings_df['Value'], labels=senate_holdings_df['Company'], autopct='%1.1f%%', startangle=140)
    plt.title('Pie Chart of Company Values')
    st.pyplot()

# Creating the DataFrame from the provided data
senate_holdings = {
    'Company': ['MSFT', 'CVX', 'NVDA', 'TCMD', 'AORT', 'Other'],
    'Value': [5318687.519617519, 145399.90950150584, 1172816.671357914, 
              138301.38223705292, 131102.6007962471, 643041.4195683461]
}

senate_holdings_df = pd.DataFrame(senate_holdings)

# Calling the function to plot the pie chart
plot_pie_chart()
    #co2_emissions_chart_placeholder = st.empty()

# Horizontal line
st.markdown('<div class="horizontal-line"></div>', unsafe_allow_html=True)

# Using columns to create a two-column layout for the bottom sections
col3, col4 = st.columns(2)

# Third column for the ranking of top polluting companies
with col3:
    st.markdown('<p class="title">Stock Analysis: Pollution Index vs Popularity</p>', unsafe_allow_html=True)
    # Placeholder for the polluting companies table
    polluting_companies_table_placeholder = st.empty()

# Vertical line
st.markdown('<div class="vl"></div>', unsafe_allow_html=True)

# Fourth column for the AI-generated information
with col4:
    st.markdown('<p class="title">AI Generated Info on Selected Stock</p>', unsafe_allow_html=True)
    # Placeholder for the AI-generated information
    ai_generated_info_placeholder = st.empty()
